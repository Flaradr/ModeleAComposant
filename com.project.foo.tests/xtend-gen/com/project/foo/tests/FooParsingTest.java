/**
 * generated by Xtext 2.13.0
 */
package com.project.foo.tests;

import com.google.inject.Inject;
import com.project.foo.foo.Component;
import com.project.foo.foo.DomainModel;
import com.project.foo.foo.FooPackage;
import com.project.foo.tests.FooInjectorProvider;
import com.project.foo.validation.FooValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(FooInjectorProvider.class)
@SuppressWarnings("all")
public class FooParsingTest {
  @Inject
  @Extension
  private ParseHelper<DomainModel> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  private final static String validComponent = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1,m2}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {m3}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m1(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type1 m2(p2 : type1) {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service requiered type3 m3();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      return _builder.toString();
    }
  }.apply();
  
  /**
   * Test si le composant est valide ou non
   */
  @Test
  public void testParsingComponent() {
    try {
      final DomainModel input = this._parseHelper.parse(FooParsingTest.validComponent);
      Assert.assertNotNull(input);
      final EList<Resource.Diagnostic> errors = input.eResource().getErrors();
      final Component component = input.getModels().get(0).getComponent().get(0);
      Assert.assertEquals("A", component.getName());
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder.append(_join);
      Assert.assertTrue(_builder.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Test la methode checkComponentNameStartsWithCapital
   */
  @Test
  public void testCheckComponentNameStartsWithCapital() {
    try {
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(FooParsingTest.validComponent));
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component a{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m1(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String input = _builder.toString();
      DomainModel _parse = this._parseHelper.parse(input);
      int _indexOf = input.indexOf("Component a");
      int _length = "Component ".length();
      int _plus = (_indexOf + _length);
      this._validationTestHelper.assertWarning(_parse, 
        FooPackage.Literals.COMPONENT, 
        FooValidator.CHECK_C_NAME_START_W_CAPITAL, _plus, 
        1, 
        "Name should start with a capital");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Test la methode checkAssemblyNameStartsWithCapital
   */
  @Test
  public void testCheckAssemblyNameStartsWithCapital() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m1(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component B{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m2}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m2(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Assembly D{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("components");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a1 : A");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b1 : B");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bindings");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String inputOk = _builder.toString();
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(inputOk));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package toto {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Component A{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("provided = {m1}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("requiered = {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided type2 m1(p1 : type2) {}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Component B{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("provided = {m2}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("requiered = {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided type2 m2(p1 : type2) {}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Assembly d{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("components");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("a1 : A");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("b1 : B");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("bindings");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      final String input = _builder_1.toString();
      DomainModel _parse = this._parseHelper.parse(input);
      int _indexOf = input.indexOf("Assembly d");
      int _length = "Assembly ".length();
      int _plus = (_indexOf + _length);
      this._validationTestHelper.assertWarning(_parse, 
        FooPackage.Literals.ASSEMBLY, 
        FooValidator.CHECK_A_NAME_START_W_CAPITAL, _plus, 
        1, 
        "Name should start with a capital");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Test la methode checkComponentNameIsUnique
   */
  @Test
  public void testCheckComponentNameIsUnique() {
    try {
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(FooParsingTest.validComponent));
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1,m2}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {m3}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m1(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type1 m2(p2 : type1) {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service requiered type3 m3();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m7}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provide type1 m7() {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String input = _builder.toString();
      DomainModel _parse = this._parseHelper.parse(input);
      int _indexOf = input.indexOf("Component A");
      int _length = "Component ".length();
      int _plus = (_indexOf + _length);
      this._validationTestHelper.assertError(_parse, 
        FooPackage.Literals.COMPONENT, 
        FooValidator.CHECK_COMPONENT_NAME_IS_UNIQUE, _plus, 
        1, 
        "The name of a component should be unique");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Test la methode checkAssemblyNameIsUnique
   */
  @Test
  public void testCheckAssemblyNameIsUnique() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m1(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component B{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m2}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m2(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Assembly D{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("components");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a1 : A");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b1 : B");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bindings");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Assembly F{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("components");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a1 : A");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b2 : B");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bindings");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String inputOk = _builder.toString();
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(inputOk));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package toto {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Component A{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("provided = {m1}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("requiered = {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided type2 m1(p1 : type2) {}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Component B{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("provided = {m2}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("requiered = {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided type2 m2(p1 : type2) {}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Assembly D{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("components");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("a1 : A");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("b1 : B");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("bindings");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Assembly D{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("components");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("a1 : A");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("b2 : B");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("bindings");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      final String input = _builder_1.toString();
      DomainModel _parse = this._parseHelper.parse(input);
      int _indexOf = input.indexOf("Assembly D");
      int _length = "Assembly ".length();
      int _plus = (_indexOf + _length);
      this._validationTestHelper.assertError(_parse, 
        FooPackage.Literals.ASSEMBLY, 
        FooValidator.CHECK_ASSEMBLY_NAME_IS_UNIQUE, _plus, 
        1, 
        "The name of an assembly should be unique");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Teste la methode checkComponentAttributeNameIsUnique
   */
  @Test
  public void testCheckComponentAttributeNameIsUnique() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m1(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component B{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m2}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m2(p1 : type2) {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Assembly D{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("components");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a1 : A");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b1 : B");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bindings");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String inputOk = _builder.toString();
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(inputOk));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package toto {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Component A{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("provided = {m1}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("requiered = {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided type2 m1(p1 : type2) {}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Component B{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("provided = {m2}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("requiered = {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided type2 m2(p1 : type2) {}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Assembly D{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("components");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("a1 : A");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("a1 : B");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("b1 : B");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("bindings");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      final String input = _builder_1.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input), 
        FooPackage.Literals.COMPONENT_ATTRIBUTE, 
        FooValidator.CHECK_COMPONENT_ATTRIBUTE_NAME_IS_UNIQUE, 
        input.indexOf("a1"), 
        2, 
        "The name of a component attribute should be unique");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Teste la methode checkProvidedServiceNameIsUnique
   */
  @Test
  public void testCheckProvidedServiceNameIsUnique() {
    try {
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(FooParsingTest.validComponent));
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1,m1}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type1 m1() {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String input = _builder.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input), 
        FooPackage.Literals.PROVIDED_SERVICE, 
        FooValidator.CHECK_P_SERVICE_NAME_IS_UNIQUE, 
        input.indexOf("m1"), 
        2, 
        "The name of a provided service should be unique in a component");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Teste la methode checkRequieredServiceNameIsUnique
   */
  @Test
  public void testCheckRequieredServiceNameIsUnique() {
    try {
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(FooParsingTest.validComponent));
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {m2,m2}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type1 m1() {}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service requiered type3 m2();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String input = _builder.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input), 
        FooPackage.Literals.REQUIERED_SERVICE, 
        FooValidator.CHECK_R_SERVICE_NAME_IS_UNIQUE, 
        input.indexOf("m2"), 
        2, 
        "The name of a requiered service should be unique in a component");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Teste la methode CheckBindingIsValid
   */
  @Test
  public void testCheckBindingIsValid() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("  \t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("provided = {m0}");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("requiered = {m1}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("service provided type0 m0() {}");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("service requiered type1 m1 ();");
      _builder.newLine();
      _builder.append("  \t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  \t");
      _builder.append("Component B{");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("provided = {m2}");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("requiered = {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("service provided type1 m2(){}");
      _builder.newLine();
      _builder.append("  \t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("  \t");
      _builder.append("Assembly T{");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("components");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("a1 : A");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("b1 : B");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("bindings");
      _builder.newLine();
      _builder.append("  \t\t");
      _builder.append("a1.m1 - b1.m2");
      _builder.newLine();
      _builder.append("  \t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String inputOk = _builder.toString();
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(inputOk));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package toto {");
      _builder_1.newLine();
      _builder_1.append("  \t");
      _builder_1.append("Component A{");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("provided = {m0}");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("requiered = {m1}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("service provided type0 m0() {}");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("service requiered type1 m1 (p1 : type1, p2 : type2);");
      _builder_1.newLine();
      _builder_1.append("  \t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  \t");
      _builder_1.append("Component B{");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("provided = {m2}");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("requiered = {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("service provided type2 m2(p21 : type1, p22 : type2){}");
      _builder_1.newLine();
      _builder_1.append("  \t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("  \t");
      _builder_1.append("Assembly T{");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("components");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("a1 : A");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("b1 : B");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("bindings");
      _builder_1.newLine();
      _builder_1.append("  \t\t");
      _builder_1.append("a1.m1 - b1.m2");
      _builder_1.newLine();
      _builder_1.append("  \t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append(" ");
      _builder_1.append("}");
      _builder_1.newLine();
      final String input1 = _builder_1.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input1), 
        FooPackage.Literals.BINDING, 
        FooValidator.CHECK_BINDING_IS_VALID, 
        input1.indexOf("b1.m2"), 
        "b1.m2".length(), 
        "Return type of the provided service do not match the return type of the requiered service");
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("package toto {");
      _builder_2.newLine();
      _builder_2.append("  \t");
      _builder_2.append("Component A{");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("provided = {m0}");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("requiered = {m1}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("service provided type0 m0() {}");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("service requiered type2 m1 (p1 : type1, p2 : type2);");
      _builder_2.newLine();
      _builder_2.append("  \t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("  \t");
      _builder_2.append("Component B{");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("provided = {m2}");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("requiered = {}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("service provided type2 m2(p7 : type1, p3 : type3){}");
      _builder_2.newLine();
      _builder_2.append("  \t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("  \t");
      _builder_2.append("Assembly T{");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("components");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("a1 : A");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("b1 : B");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("bindings");
      _builder_2.newLine();
      _builder_2.append("  \t\t");
      _builder_2.append("a1.m1 - b1.m2");
      _builder_2.newLine();
      _builder_2.append("  \t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append(" ");
      _builder_2.append("}");
      _builder_2.newLine();
      final String input2 = _builder_2.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input2), 
        FooPackage.Literals.BINDING, 
        FooValidator.CHECK_BINDING_IS_VALID, 
        input2.indexOf("b1.m2"), 
        "b1.m2".length(), 
        "The type of the parameters of the requiered service and the provided service do not match");
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("package toto {");
      _builder_3.newLine();
      _builder_3.append("  \t");
      _builder_3.append("Component A{");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("provided = {m0}");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("requiered = {m1}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("service provided type0 m0() {}");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("service requiered type2 m1 (p1 : type1, p2 : type2, p3 : type0);");
      _builder_3.newLine();
      _builder_3.append("  \t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("  \t");
      _builder_3.append("Component B{");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("provided = {m2}");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("requiered = {}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("service provided type2 m2(p7 : type1, p3 : type3){}");
      _builder_3.newLine();
      _builder_3.append("  \t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("  \t");
      _builder_3.append("Assembly T{");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("components");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("a1 : A");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("b1 : B");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("bindings");
      _builder_3.newLine();
      _builder_3.append("  \t\t");
      _builder_3.append("a1.m1 - b1.m2");
      _builder_3.newLine();
      _builder_3.append("  \t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      final String input3 = _builder_3.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input3), 
        FooPackage.Literals.BINDING, 
        FooValidator.CHECK_BINDING_IS_VALID, 
        input3.indexOf("b1.m2"), 
        "b1.m2".length(), 
        "Number of parameters between the requiered service and the provided service do not match");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Teste la methode checkProvidedServiceHasMethod
   */
  @Test
  public void testCheckProvidedServiceHasMethod() {
    try {
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(FooParsingTest.validComponent));
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {m2}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service requiered type3 m2();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String input = _builder.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input), 
        FooPackage.Literals.PROVIDED_SERVICE, 
        FooValidator.CHECK_P_SERVICE_HAS_METHOD, 
        input.indexOf("m1"), 
        "m1".length(), 
        "The service needs a method declaration");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Teste la methode checkRequieredServiceHasMethod
   */
  @Test
  public void testCheckRequieredServiceHasMethod() {
    try {
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(FooParsingTest.validComponent));
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {m2}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type1 m1() {}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String input = _builder.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input), 
        FooPackage.Literals.REQUIERED_SERVICE, 
        FooValidator.CHECK_R_SERVICE_HAS_METHOD, 
        input.indexOf("m2"), 
        "m2".length(), 
        "The service needs a method declaration");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  /**
   * Teste la mmethode checkAssemblyIsCorrect
   */
  @Test
  public void testCheckAssemblyIsCorrect() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package toto {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component A{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m1,m2}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {m3}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type2 m1(p1 : type1) {}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided void m2() {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service requiered type3 m3(p2 : type4);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Component B{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("provided = {m4}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("requiered = {m1}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service provided type3 m4 (p4 : type4) { }");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("service requiered type2 m1 (p3 : type1);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("Assembly Foo{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("components");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a1 : A");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a2 : A");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b1 : B");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("bindings");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a1.m3 - b1.m4");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("a2.m3 - b1.m4");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("b1.m1 - a1.m1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final String inputOk = _builder.toString();
      this._validationTestHelper.assertNoIssues(this._parseHelper.parse(inputOk));
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package toto {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Component A{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("provided = {m1,m2}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("requiered = {m3}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided type2 m1(p1 : type1) {}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided void m2() {}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service requiered type3 m3(p2 : type4);");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Component B{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("provided = {m4}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("requiered = {m1}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service provided type3 m4 (p4 : type4) { }");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("service requiered type2 m1 (p3 : type1);");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("Assembly Foo{");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("components");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("a1 : A");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("a2 : A");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("b1 : B");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("bindings");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("a1.m3 - b1.m4");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("b1.m1 - a1.m1");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      final String input = _builder_1.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input), 
        FooPackage.Literals.ASSEMBLY, 
        FooValidator.CHECK_ASSEMBLY_IS_VALID, 
        input.indexOf("Foo"), 
        "Foo".length(), 
        "The assembly is not correct, there are missing bindings");
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("package toto {");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("Component A{");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("provided = {m1,m2}");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("requiered = {m3}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("service provided type2 m1(p1 : type1) {}");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("service provided void m2() {}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("service requiered type3 m3(p2 : type4);");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("Component B{");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("provided = {m4}");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("requiered = {m1}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("service provided type3 m4 (p4 : type4) { }");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("service requiered type2 m1 (p3 : type1);");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("Assembly Foo{");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("components");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("a1 : A");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("a2 : A");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("b1 : B");
      _builder_2.newLine();
      _builder_2.append("\t\t");
      _builder_2.append("bindings");
      _builder_2.newLine();
      _builder_2.append("\t");
      _builder_2.append("}");
      _builder_2.newLine();
      _builder_2.append("}");
      _builder_2.newLine();
      final String input2 = _builder_2.toString();
      this._validationTestHelper.assertError(this._parseHelper.parse(input2), 
        FooPackage.Literals.ASSEMBLY, 
        FooValidator.CHECK_ASSEMBLY_IS_VALID, 
        input.indexOf("Foo"), 
        "Foo".length(), 
        "The assembly is not correct, there are missing bindings");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
