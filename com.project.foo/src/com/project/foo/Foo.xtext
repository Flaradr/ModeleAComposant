grammar com.project.foo.Foo with org.eclipse.xtext.common.Terminals

generate foo "http://www.project.com/foo/Foo"

//Concerne les modeles
DomainModel:
	model=Model;

/*
 * Structure d'un modele, correspond
 * à un paquet pouvant contenir plusieurs
 * composants et assemblages
 */
Model:
	'package' name=QualifiedName '{'
	(imports+=Import)*
	(components+=Component)*
	(assembly+=Assembly)*
	(refiningList+=Refine)*
	'}';

	
QualifiedName:
    ID ('.' ID)*;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;

Refine:
	'refine' eltToRefine=[Element] 'with' refiningElt=[Element];
	
Element:
	Component|Binding
;
			 
//Structure d'un assemblage
Assembly:
	{Assembly}'Assembly' name=ID '{'
	'components'
	attributes+=ComponentInstance
	(attributes+=ComponentInstance)+
	'bindings'
	(bindings+=Binding)*
	'}';

//Structure d'un composant
ComponentInstance:
	name=ID ':' component=[Component|QualifiedName];

//Lien entre d'un service requis d'un composant X et d'un
//service fourni d'un composant Y
Binding:
	bindingRequired=BindingRequired '-' bindingProvided=BindingProvided ;

//Instance du composant ayant besoin d'un service
BindingRequired:
	name=[ComponentInstance]"."service=[RSignature|QualifiedName];

//Instance du composant fournissant un service
BindingProvided:
	name=[ComponentInstance]"."service=[PSignature|QualifiedName];

//Structure d'un composant
Component:
	'Component' name=ID '{'
	listOfPServices = ListOfProvidedServices
	listOfRServices = ListOfrequiredServices
	(mProvServices += MProvidedService)+
	(mReqServices += MRequiredService)*
	(('assembly' ':')?assemblies+=[Assembly|QualifiedName])*
	'}';

//Liste des services fourni par un composant X
ListOfProvidedServices:
	'provided' '=' '{'
		(providedServices+=ProvidedService
		(',' providedServices+=ProvidedService)*)
	'}';

ProvidedService:
	name=[PSignature];
	
//Liste des services requis par un composant X
ListOfrequiredServices:
	{ListOfrequiredServices}'required' '=' '{'
		(requiredServices+=RequiredService?
		(',' requiredServices+=RequiredService)*)
	'}';

RequiredService:
	name=[RSignature];
	
//Signature d'un service fourni
MProvidedService:
	'service' 'provided' signature=PSignature'{'
		(expressions+=Expression)+
	'}';

Expression:
	If | While | Str;

If :
	'if' '(' (conditions+=Condition('||'|'&&'))*conditions+=Condition ')' '{'
		(str+=Str |
		 if+=If|
		 while+=While)+
	'}'(=>'else'(else=If | '{' 
		(str+=Str|
		 if+=If|
		 while+=While)+
	'}'))?;
	
While :
	'while''('(conditions+=Condition('||'|'&&'))*conditions+=Condition ')' '{'
		(str+=Str |
		 if+=If|
		 while+=While)+
	'}';
	
Condition:
	'!'?(conditions+=Comparison|conditions+=Str)+;
	
Str:
	value+=ID('.'value+=ID'('value+=ID?')')*';'?;
	
Comparison:
	leftMember=ID ('<'|'>'|'<='|'>='|'==') rightMember=ID
;


//Signature d'un service fourni
PSignature:
	type=ID name=ID'('parameters+=Parameter?(','parameters+=Parameter)*')';

MRequiredService:
	'service' 'required' signature=RSignature  ';';

//Signature d'un service requis
RSignature:
	type=ID name=ID'('parameters+=Parameter?(','parameters+=Parameter)*')';

//Parametre dans une signature 
Parameter:
	name=ID ':' type=ID;
