/*
 * generated by Xtext 2.13.0
 */
package com.project.foo.scoping

import com.project.foo.foo.Model
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.impl.ImportNormalizer
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider

/**
 * This class contains custom scoping description.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */

class FooScopeProvider extends ImportedNamespaceAwareLocalScopeProvider{
	
	/*
	 *Permet d'auto importer le paquet auquel le modele en cours d'analyse appartient 
	 *ainsi que les services des composants importés
	 */
	override protected List<ImportNormalizer> getImportedNamespaceResolvers(EObject context, boolean ignorecase){
		var List<ImportNormalizer> importedNamespaceResolvers = super.getImportedNamespaceResolvers(context, ignorecase);
		if (context instanceof Model){
			var model = (context as Model)
			println("\nANALYSE MODELE : " + model.name)
			importedNamespaceResolvers.add(doCreateImportNormalizer(getQualifiedNameConverter().toQualifiedName(model.getName()), true, ignorecase))
		
			for (var i = 0; i < model.components.size(); i++){
				importedNamespaceResolvers.add(doCreateImportNormalizer(getQualifiedNameConverter().toQualifiedName(model.name+"."+model.components.get(i).name), true, ignorecase))
			}
			
			for (var j = 0; j < model.imports.size(); j++){
				println(doCreateImportNormalizer(getQualifiedNameConverter().toQualifiedName(model.imports.get(j).importedNamespace), true, ignorecase))
				importedNamespaceResolvers.add(doCreateImportNormalizer(getQualifiedNameConverter().toQualifiedName(model.imports.get(j).importedNamespace), true, ignorecase))
				
			}
		}
		return importedNamespaceResolvers;
	}	
	
}