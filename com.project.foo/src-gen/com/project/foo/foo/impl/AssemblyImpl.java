/**
 * generated by Xtext 2.13.0
 */
package com.project.foo.foo.impl;

import com.project.foo.foo.Assembly;
import com.project.foo.foo.BindingProvided;
import com.project.foo.foo.BindingRequiered;
import com.project.foo.foo.ComponentInstance;
import com.project.foo.foo.FooPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assembly</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.project.foo.foo.impl.AssemblyImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.AssemblyImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.AssemblyImpl#getBindingsRequiered <em>Bindings Requiered</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.AssemblyImpl#getBindingsProvided <em>Bindings Provided</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssemblyImpl extends MinimalEObjectImpl.Container implements Assembly
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<ComponentInstance> attributes;

  /**
   * The cached value of the '{@link #getBindingsRequiered() <em>Bindings Requiered</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindingsRequiered()
   * @generated
   * @ordered
   */
  protected EList<BindingRequiered> bindingsRequiered;

  /**
   * The cached value of the '{@link #getBindingsProvided() <em>Bindings Provided</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindingsProvided()
   * @generated
   * @ordered
   */
  protected EList<BindingProvided> bindingsProvided;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssemblyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FooPackage.Literals.ASSEMBLY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.ASSEMBLY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ComponentInstance> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<ComponentInstance>(ComponentInstance.class, this, FooPackage.ASSEMBLY__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BindingRequiered> getBindingsRequiered()
  {
    if (bindingsRequiered == null)
    {
      bindingsRequiered = new EObjectContainmentEList<BindingRequiered>(BindingRequiered.class, this, FooPackage.ASSEMBLY__BINDINGS_REQUIERED);
    }
    return bindingsRequiered;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BindingProvided> getBindingsProvided()
  {
    if (bindingsProvided == null)
    {
      bindingsProvided = new EObjectContainmentEList<BindingProvided>(BindingProvided.class, this, FooPackage.ASSEMBLY__BINDINGS_PROVIDED);
    }
    return bindingsProvided;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FooPackage.ASSEMBLY__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
      case FooPackage.ASSEMBLY__BINDINGS_REQUIERED:
        return ((InternalEList<?>)getBindingsRequiered()).basicRemove(otherEnd, msgs);
      case FooPackage.ASSEMBLY__BINDINGS_PROVIDED:
        return ((InternalEList<?>)getBindingsProvided()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FooPackage.ASSEMBLY__NAME:
        return getName();
      case FooPackage.ASSEMBLY__ATTRIBUTES:
        return getAttributes();
      case FooPackage.ASSEMBLY__BINDINGS_REQUIERED:
        return getBindingsRequiered();
      case FooPackage.ASSEMBLY__BINDINGS_PROVIDED:
        return getBindingsProvided();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FooPackage.ASSEMBLY__NAME:
        setName((String)newValue);
        return;
      case FooPackage.ASSEMBLY__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends ComponentInstance>)newValue);
        return;
      case FooPackage.ASSEMBLY__BINDINGS_REQUIERED:
        getBindingsRequiered().clear();
        getBindingsRequiered().addAll((Collection<? extends BindingRequiered>)newValue);
        return;
      case FooPackage.ASSEMBLY__BINDINGS_PROVIDED:
        getBindingsProvided().clear();
        getBindingsProvided().addAll((Collection<? extends BindingProvided>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FooPackage.ASSEMBLY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case FooPackage.ASSEMBLY__ATTRIBUTES:
        getAttributes().clear();
        return;
      case FooPackage.ASSEMBLY__BINDINGS_REQUIERED:
        getBindingsRequiered().clear();
        return;
      case FooPackage.ASSEMBLY__BINDINGS_PROVIDED:
        getBindingsProvided().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FooPackage.ASSEMBLY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case FooPackage.ASSEMBLY__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case FooPackage.ASSEMBLY__BINDINGS_REQUIERED:
        return bindingsRequiered != null && !bindingsRequiered.isEmpty();
      case FooPackage.ASSEMBLY__BINDINGS_PROVIDED:
        return bindingsProvided != null && !bindingsProvided.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //AssemblyImpl
