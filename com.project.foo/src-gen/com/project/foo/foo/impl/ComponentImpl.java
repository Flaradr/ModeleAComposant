/**
 * generated by Xtext 2.13.0
 */
package com.project.foo.foo.impl;

import com.project.foo.foo.Component;
import com.project.foo.foo.FooPackage;
import com.project.foo.foo.MProvidedService;
import com.project.foo.foo.MRequieredService;
import com.project.foo.foo.Provided;
import com.project.foo.foo.Requiered;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getProvided <em>Provided</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getRequiered <em>Requiered</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getMProvServices <em>MProv Services</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getMReqServices <em>MReq Services</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentImpl extends MinimalEObjectImpl.Container implements Component
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getProvided() <em>Provided</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProvided()
   * @generated
   * @ordered
   */
  protected Provided provided;

  /**
   * The cached value of the '{@link #getRequiered() <em>Requiered</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiered()
   * @generated
   * @ordered
   */
  protected Requiered requiered;

  /**
   * The cached value of the '{@link #getMProvServices() <em>MProv Services</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMProvServices()
   * @generated
   * @ordered
   */
  protected EList<MProvidedService> mProvServices;

  /**
   * The cached value of the '{@link #getMReqServices() <em>MReq Services</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMReqServices()
   * @generated
   * @ordered
   */
  protected EList<MRequieredService> mReqServices;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FooPackage.Literals.COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Provided getProvided()
  {
    return provided;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProvided(Provided newProvided, NotificationChain msgs)
  {
    Provided oldProvided = provided;
    provided = newProvided;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__PROVIDED, oldProvided, newProvided);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProvided(Provided newProvided)
  {
    if (newProvided != provided)
    {
      NotificationChain msgs = null;
      if (provided != null)
        msgs = ((InternalEObject)provided).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FooPackage.COMPONENT__PROVIDED, null, msgs);
      if (newProvided != null)
        msgs = ((InternalEObject)newProvided).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FooPackage.COMPONENT__PROVIDED, null, msgs);
      msgs = basicSetProvided(newProvided, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__PROVIDED, newProvided, newProvided));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Requiered getRequiered()
  {
    return requiered;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRequiered(Requiered newRequiered, NotificationChain msgs)
  {
    Requiered oldRequiered = requiered;
    requiered = newRequiered;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__REQUIERED, oldRequiered, newRequiered);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRequiered(Requiered newRequiered)
  {
    if (newRequiered != requiered)
    {
      NotificationChain msgs = null;
      if (requiered != null)
        msgs = ((InternalEObject)requiered).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FooPackage.COMPONENT__REQUIERED, null, msgs);
      if (newRequiered != null)
        msgs = ((InternalEObject)newRequiered).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FooPackage.COMPONENT__REQUIERED, null, msgs);
      msgs = basicSetRequiered(newRequiered, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__REQUIERED, newRequiered, newRequiered));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MProvidedService> getMProvServices()
  {
    if (mProvServices == null)
    {
      mProvServices = new EObjectContainmentEList<MProvidedService>(MProvidedService.class, this, FooPackage.COMPONENT__MPROV_SERVICES);
    }
    return mProvServices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MRequieredService> getMReqServices()
  {
    if (mReqServices == null)
    {
      mReqServices = new EObjectContainmentEList<MRequieredService>(MRequieredService.class, this, FooPackage.COMPONENT__MREQ_SERVICES);
    }
    return mReqServices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__PROVIDED:
        return basicSetProvided(null, msgs);
      case FooPackage.COMPONENT__REQUIERED:
        return basicSetRequiered(null, msgs);
      case FooPackage.COMPONENT__MPROV_SERVICES:
        return ((InternalEList<?>)getMProvServices()).basicRemove(otherEnd, msgs);
      case FooPackage.COMPONENT__MREQ_SERVICES:
        return ((InternalEList<?>)getMReqServices()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__NAME:
        return getName();
      case FooPackage.COMPONENT__PROVIDED:
        return getProvided();
      case FooPackage.COMPONENT__REQUIERED:
        return getRequiered();
      case FooPackage.COMPONENT__MPROV_SERVICES:
        return getMProvServices();
      case FooPackage.COMPONENT__MREQ_SERVICES:
        return getMReqServices();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__NAME:
        setName((String)newValue);
        return;
      case FooPackage.COMPONENT__PROVIDED:
        setProvided((Provided)newValue);
        return;
      case FooPackage.COMPONENT__REQUIERED:
        setRequiered((Requiered)newValue);
        return;
      case FooPackage.COMPONENT__MPROV_SERVICES:
        getMProvServices().clear();
        getMProvServices().addAll((Collection<? extends MProvidedService>)newValue);
        return;
      case FooPackage.COMPONENT__MREQ_SERVICES:
        getMReqServices().clear();
        getMReqServices().addAll((Collection<? extends MRequieredService>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case FooPackage.COMPONENT__PROVIDED:
        setProvided((Provided)null);
        return;
      case FooPackage.COMPONENT__REQUIERED:
        setRequiered((Requiered)null);
        return;
      case FooPackage.COMPONENT__MPROV_SERVICES:
        getMProvServices().clear();
        return;
      case FooPackage.COMPONENT__MREQ_SERVICES:
        getMReqServices().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case FooPackage.COMPONENT__PROVIDED:
        return provided != null;
      case FooPackage.COMPONENT__REQUIERED:
        return requiered != null;
      case FooPackage.COMPONENT__MPROV_SERVICES:
        return mProvServices != null && !mProvServices.isEmpty();
      case FooPackage.COMPONENT__MREQ_SERVICES:
        return mReqServices != null && !mReqServices.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ComponentImpl
