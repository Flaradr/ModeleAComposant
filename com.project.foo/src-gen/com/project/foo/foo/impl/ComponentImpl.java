/**
 * generated by Xtext 2.13.0
 */
package com.project.foo.foo.impl;

import com.project.foo.foo.Assembly;
import com.project.foo.foo.Component;
import com.project.foo.foo.FooPackage;
import com.project.foo.foo.ListOfProvidedServices;
import com.project.foo.foo.ListOfrequiredServices;
import com.project.foo.foo.MProvidedService;
import com.project.foo.foo.MRequiredService;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getRefinedComponent <em>Refined Component</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getListOfPServices <em>List Of PServices</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getListOfRServices <em>List Of RServices</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getMProvServices <em>MProv Services</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getMReqServices <em>MReq Services</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.ComponentImpl#getAssemblies <em>Assemblies</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentImpl extends MinimalEObjectImpl.Container implements Component
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getRefinedComponent() <em>Refined Component</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefinedComponent()
   * @generated
   * @ordered
   */
  protected Component refinedComponent;

  /**
   * The cached value of the '{@link #getListOfPServices() <em>List Of PServices</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListOfPServices()
   * @generated
   * @ordered
   */
  protected ListOfProvidedServices listOfPServices;

  /**
   * The cached value of the '{@link #getListOfRServices() <em>List Of RServices</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListOfRServices()
   * @generated
   * @ordered
   */
  protected ListOfrequiredServices listOfRServices;

  /**
   * The cached value of the '{@link #getMProvServices() <em>MProv Services</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMProvServices()
   * @generated
   * @ordered
   */
  protected EList<MProvidedService> mProvServices;

  /**
   * The cached value of the '{@link #getMReqServices() <em>MReq Services</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMReqServices()
   * @generated
   * @ordered
   */
  protected EList<MRequiredService> mReqServices;

  /**
   * The cached value of the '{@link #getAssemblies() <em>Assemblies</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssemblies()
   * @generated
   * @ordered
   */
  protected EList<Assembly> assemblies;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FooPackage.Literals.COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component getRefinedComponent()
  {
    if (refinedComponent != null && refinedComponent.eIsProxy())
    {
      InternalEObject oldRefinedComponent = (InternalEObject)refinedComponent;
      refinedComponent = (Component)eResolveProxy(oldRefinedComponent);
      if (refinedComponent != oldRefinedComponent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FooPackage.COMPONENT__REFINED_COMPONENT, oldRefinedComponent, refinedComponent));
      }
    }
    return refinedComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component basicGetRefinedComponent()
  {
    return refinedComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRefinedComponent(Component newRefinedComponent)
  {
    Component oldRefinedComponent = refinedComponent;
    refinedComponent = newRefinedComponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__REFINED_COMPONENT, oldRefinedComponent, refinedComponent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListOfProvidedServices getListOfPServices()
  {
    return listOfPServices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetListOfPServices(ListOfProvidedServices newListOfPServices, NotificationChain msgs)
  {
    ListOfProvidedServices oldListOfPServices = listOfPServices;
    listOfPServices = newListOfPServices;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__LIST_OF_PSERVICES, oldListOfPServices, newListOfPServices);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setListOfPServices(ListOfProvidedServices newListOfPServices)
  {
    if (newListOfPServices != listOfPServices)
    {
      NotificationChain msgs = null;
      if (listOfPServices != null)
        msgs = ((InternalEObject)listOfPServices).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FooPackage.COMPONENT__LIST_OF_PSERVICES, null, msgs);
      if (newListOfPServices != null)
        msgs = ((InternalEObject)newListOfPServices).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FooPackage.COMPONENT__LIST_OF_PSERVICES, null, msgs);
      msgs = basicSetListOfPServices(newListOfPServices, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__LIST_OF_PSERVICES, newListOfPServices, newListOfPServices));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ListOfrequiredServices getListOfRServices()
  {
    return listOfRServices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetListOfRServices(ListOfrequiredServices newListOfRServices, NotificationChain msgs)
  {
    ListOfrequiredServices oldListOfRServices = listOfRServices;
    listOfRServices = newListOfRServices;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__LIST_OF_RSERVICES, oldListOfRServices, newListOfRServices);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setListOfRServices(ListOfrequiredServices newListOfRServices)
  {
    if (newListOfRServices != listOfRServices)
    {
      NotificationChain msgs = null;
      if (listOfRServices != null)
        msgs = ((InternalEObject)listOfRServices).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FooPackage.COMPONENT__LIST_OF_RSERVICES, null, msgs);
      if (newListOfRServices != null)
        msgs = ((InternalEObject)newListOfRServices).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FooPackage.COMPONENT__LIST_OF_RSERVICES, null, msgs);
      msgs = basicSetListOfRServices(newListOfRServices, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.COMPONENT__LIST_OF_RSERVICES, newListOfRServices, newListOfRServices));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MProvidedService> getMProvServices()
  {
    if (mProvServices == null)
    {
      mProvServices = new EObjectContainmentEList<MProvidedService>(MProvidedService.class, this, FooPackage.COMPONENT__MPROV_SERVICES);
    }
    return mProvServices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<MRequiredService> getMReqServices()
  {
    if (mReqServices == null)
    {
      mReqServices = new EObjectContainmentEList<MRequiredService>(MRequiredService.class, this, FooPackage.COMPONENT__MREQ_SERVICES);
    }
    return mReqServices;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Assembly> getAssemblies()
  {
    if (assemblies == null)
    {
      assemblies = new EObjectResolvingEList<Assembly>(Assembly.class, this, FooPackage.COMPONENT__ASSEMBLIES);
    }
    return assemblies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__LIST_OF_PSERVICES:
        return basicSetListOfPServices(null, msgs);
      case FooPackage.COMPONENT__LIST_OF_RSERVICES:
        return basicSetListOfRServices(null, msgs);
      case FooPackage.COMPONENT__MPROV_SERVICES:
        return ((InternalEList<?>)getMProvServices()).basicRemove(otherEnd, msgs);
      case FooPackage.COMPONENT__MREQ_SERVICES:
        return ((InternalEList<?>)getMReqServices()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__NAME:
        return getName();
      case FooPackage.COMPONENT__REFINED_COMPONENT:
        if (resolve) return getRefinedComponent();
        return basicGetRefinedComponent();
      case FooPackage.COMPONENT__LIST_OF_PSERVICES:
        return getListOfPServices();
      case FooPackage.COMPONENT__LIST_OF_RSERVICES:
        return getListOfRServices();
      case FooPackage.COMPONENT__MPROV_SERVICES:
        return getMProvServices();
      case FooPackage.COMPONENT__MREQ_SERVICES:
        return getMReqServices();
      case FooPackage.COMPONENT__ASSEMBLIES:
        return getAssemblies();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__NAME:
        setName((String)newValue);
        return;
      case FooPackage.COMPONENT__REFINED_COMPONENT:
        setRefinedComponent((Component)newValue);
        return;
      case FooPackage.COMPONENT__LIST_OF_PSERVICES:
        setListOfPServices((ListOfProvidedServices)newValue);
        return;
      case FooPackage.COMPONENT__LIST_OF_RSERVICES:
        setListOfRServices((ListOfrequiredServices)newValue);
        return;
      case FooPackage.COMPONENT__MPROV_SERVICES:
        getMProvServices().clear();
        getMProvServices().addAll((Collection<? extends MProvidedService>)newValue);
        return;
      case FooPackage.COMPONENT__MREQ_SERVICES:
        getMReqServices().clear();
        getMReqServices().addAll((Collection<? extends MRequiredService>)newValue);
        return;
      case FooPackage.COMPONENT__ASSEMBLIES:
        getAssemblies().clear();
        getAssemblies().addAll((Collection<? extends Assembly>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case FooPackage.COMPONENT__REFINED_COMPONENT:
        setRefinedComponent((Component)null);
        return;
      case FooPackage.COMPONENT__LIST_OF_PSERVICES:
        setListOfPServices((ListOfProvidedServices)null);
        return;
      case FooPackage.COMPONENT__LIST_OF_RSERVICES:
        setListOfRServices((ListOfrequiredServices)null);
        return;
      case FooPackage.COMPONENT__MPROV_SERVICES:
        getMProvServices().clear();
        return;
      case FooPackage.COMPONENT__MREQ_SERVICES:
        getMReqServices().clear();
        return;
      case FooPackage.COMPONENT__ASSEMBLIES:
        getAssemblies().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FooPackage.COMPONENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case FooPackage.COMPONENT__REFINED_COMPONENT:
        return refinedComponent != null;
      case FooPackage.COMPONENT__LIST_OF_PSERVICES:
        return listOfPServices != null;
      case FooPackage.COMPONENT__LIST_OF_RSERVICES:
        return listOfRServices != null;
      case FooPackage.COMPONENT__MPROV_SERVICES:
        return mProvServices != null && !mProvServices.isEmpty();
      case FooPackage.COMPONENT__MREQ_SERVICES:
        return mReqServices != null && !mReqServices.isEmpty();
      case FooPackage.COMPONENT__ASSEMBLIES:
        return assemblies != null && !assemblies.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ComponentImpl
