/**
 * generated by Xtext 2.13.0
 */
package com.project.foo.foo.impl;

import com.project.foo.foo.Binding;
import com.project.foo.foo.BindingProvided;
import com.project.foo.foo.BindingRequiered;
import com.project.foo.foo.FooPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Binding</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.project.foo.foo.impl.BindingImpl#getBindingRequiered <em>Binding Requiered</em>}</li>
 *   <li>{@link com.project.foo.foo.impl.BindingImpl#getBindingProvided <em>Binding Provided</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BindingImpl extends MinimalEObjectImpl.Container implements Binding
{
  /**
   * The cached value of the '{@link #getBindingRequiered() <em>Binding Requiered</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindingRequiered()
   * @generated
   * @ordered
   */
  protected BindingRequiered bindingRequiered;

  /**
   * The cached value of the '{@link #getBindingProvided() <em>Binding Provided</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindingProvided()
   * @generated
   * @ordered
   */
  protected BindingProvided bindingProvided;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BindingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FooPackage.Literals.BINDING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BindingRequiered getBindingRequiered()
  {
    return bindingRequiered;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBindingRequiered(BindingRequiered newBindingRequiered, NotificationChain msgs)
  {
    BindingRequiered oldBindingRequiered = bindingRequiered;
    bindingRequiered = newBindingRequiered;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FooPackage.BINDING__BINDING_REQUIERED, oldBindingRequiered, newBindingRequiered);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBindingRequiered(BindingRequiered newBindingRequiered)
  {
    if (newBindingRequiered != bindingRequiered)
    {
      NotificationChain msgs = null;
      if (bindingRequiered != null)
        msgs = ((InternalEObject)bindingRequiered).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FooPackage.BINDING__BINDING_REQUIERED, null, msgs);
      if (newBindingRequiered != null)
        msgs = ((InternalEObject)newBindingRequiered).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FooPackage.BINDING__BINDING_REQUIERED, null, msgs);
      msgs = basicSetBindingRequiered(newBindingRequiered, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.BINDING__BINDING_REQUIERED, newBindingRequiered, newBindingRequiered));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BindingProvided getBindingProvided()
  {
    return bindingProvided;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBindingProvided(BindingProvided newBindingProvided, NotificationChain msgs)
  {
    BindingProvided oldBindingProvided = bindingProvided;
    bindingProvided = newBindingProvided;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FooPackage.BINDING__BINDING_PROVIDED, oldBindingProvided, newBindingProvided);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBindingProvided(BindingProvided newBindingProvided)
  {
    if (newBindingProvided != bindingProvided)
    {
      NotificationChain msgs = null;
      if (bindingProvided != null)
        msgs = ((InternalEObject)bindingProvided).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FooPackage.BINDING__BINDING_PROVIDED, null, msgs);
      if (newBindingProvided != null)
        msgs = ((InternalEObject)newBindingProvided).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FooPackage.BINDING__BINDING_PROVIDED, null, msgs);
      msgs = basicSetBindingProvided(newBindingProvided, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FooPackage.BINDING__BINDING_PROVIDED, newBindingProvided, newBindingProvided));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FooPackage.BINDING__BINDING_REQUIERED:
        return basicSetBindingRequiered(null, msgs);
      case FooPackage.BINDING__BINDING_PROVIDED:
        return basicSetBindingProvided(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FooPackage.BINDING__BINDING_REQUIERED:
        return getBindingRequiered();
      case FooPackage.BINDING__BINDING_PROVIDED:
        return getBindingProvided();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FooPackage.BINDING__BINDING_REQUIERED:
        setBindingRequiered((BindingRequiered)newValue);
        return;
      case FooPackage.BINDING__BINDING_PROVIDED:
        setBindingProvided((BindingProvided)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FooPackage.BINDING__BINDING_REQUIERED:
        setBindingRequiered((BindingRequiered)null);
        return;
      case FooPackage.BINDING__BINDING_PROVIDED:
        setBindingProvided((BindingProvided)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FooPackage.BINDING__BINDING_REQUIERED:
        return bindingRequiered != null;
      case FooPackage.BINDING__BINDING_PROVIDED:
        return bindingProvided != null;
    }
    return super.eIsSet(featureID);
  }

} //BindingImpl
