/*
 * generated by Xtext 2.13.0
 */
package com.project.foo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FooGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.DomainModel");
		private final Assignment cModelsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModelsModelParserRuleCall_0 = (RuleCall)cModelsAssignment.eContents().get(0);
		
		////Concerne les modeles
		//DomainModel:
		//	models+=Model*;
		@Override public ParserRule getRule() { return rule; }
		
		//models+=Model*
		public Assignment getModelsAssignment() { return cModelsAssignment; }
		
		//Model
		public RuleCall getModelsModelParserRuleCall_0() { return cModelsModelParserRuleCall_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cComponentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentComponentParserRuleCall_4_0 = (RuleCall)cComponentAssignment_4.eContents().get(0);
		private final Assignment cAssemblyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssemblyAssemblyParserRuleCall_5_0 = (RuleCall)cAssemblyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Model:
		//	'package' name=QualifiedName '{'
		//	imports+=Import*
		//	component+=Component*
		//	assembly+=Assembly*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' imports+=Import* component+=Component* assembly+=Assembly* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//component+=Component*
		public Assignment getComponentAssignment_4() { return cComponentAssignment_4; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_4_0() { return cComponentComponentParserRuleCall_4_0; }
		
		//assembly+=Assembly*
		public Assignment getAssemblyAssignment_5() { return cAssemblyAssignment_5; }
		
		//Assembly
		public RuleCall getAssemblyAssemblyParserRuleCall_5_0() { return cAssemblyAssemblyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStaticKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtensionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportedNamespaceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportedNamespaceFqnWithWildCardParserRuleCall_3_0 = (RuleCall)cImportedNamespaceAssignment_3.eContents().get(0);
		
		//Import:
		//	'import' 'static' 'extension' importedNamespace=FqnWithWildCard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' 'static' 'extension' importedNamespace=FqnWithWildCard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//'static'
		public Keyword getStaticKeyword_1() { return cStaticKeyword_1; }
		
		//'extension'
		public Keyword getExtensionKeyword_2() { return cExtensionKeyword_2; }
		
		//importedNamespace=FqnWithWildCard
		public Assignment getImportedNamespaceAssignment_3() { return cImportedNamespaceAssignment_3; }
		
		//FqnWithWildCard
		public RuleCall getImportedNamespaceFqnWithWildCardParserRuleCall_3_0() { return cImportedNamespaceFqnWithWildCardParserRuleCall_3_0; }
	}
	public class FqnWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.FqnWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FqnWithWildCard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class AssemblyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Assembly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssemblyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssemblyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cComponentsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesComponentAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesComponentAttributeParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Keyword cBindingsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBindingsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBindingsBindingParserRuleCall_8_0 = (RuleCall)cBindingsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Concernce les assemblages
		//Assembly:
		//	{Assembly} 'Assembly' name=ID '{'
		//	'components'
		//	attributes+=ComponentAttribute
		//	attributes+=ComponentAttribute+
		//	'bindings'
		//	bindings+=Binding*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Assembly} 'Assembly' name=ID '{' 'components' attributes+=ComponentAttribute attributes+=ComponentAttribute+ 'bindings'
		//bindings+=Binding* '}'
		public Group getGroup() { return cGroup; }
		
		//{Assembly}
		public Action getAssemblyAction_0() { return cAssemblyAction_0; }
		
		//'Assembly'
		public Keyword getAssemblyKeyword_1() { return cAssemblyKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'components'
		public Keyword getComponentsKeyword_4() { return cComponentsKeyword_4; }
		
		//attributes+=ComponentAttribute
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//ComponentAttribute
		public RuleCall getAttributesComponentAttributeParserRuleCall_5_0() { return cAttributesComponentAttributeParserRuleCall_5_0; }
		
		//attributes+=ComponentAttribute+
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }
		
		//ComponentAttribute
		public RuleCall getAttributesComponentAttributeParserRuleCall_6_0() { return cAttributesComponentAttributeParserRuleCall_6_0; }
		
		//'bindings'
		public Keyword getBindingsKeyword_7() { return cBindingsKeyword_7; }
		
		//bindings+=Binding*
		public Assignment getBindingsAssignment_8() { return cBindingsAssignment_8; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_8_0() { return cBindingsBindingParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ComponentAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.ComponentAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeComponentCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeComponentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeComponentCrossReference_2_0.eContents().get(1);
		
		////Les composants constituant un assemblage
		//ComponentAttribute:
		//	name=ID ':' type=[Component|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[Component|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[Component|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Component|QualifiedName]
		public CrossReference getTypeComponentCrossReference_2_0() { return cTypeComponentCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeComponentQualifiedNameParserRuleCall_2_0_1() { return cTypeComponentQualifiedNameParserRuleCall_2_0_1; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMGAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMGBindingRequieredParserRuleCall_0_0 = (RuleCall)cMGAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMDBindingProvidedParserRuleCall_2_0 = (RuleCall)cMDAssignment_2.eContents().get(0);
		
		//Binding:
		//	mG=BindingRequiered '-' mD=BindingProvided;
		@Override public ParserRule getRule() { return rule; }
		
		//mG=BindingRequiered '-' mD=BindingProvided
		public Group getGroup() { return cGroup; }
		
		//mG=BindingRequiered
		public Assignment getMGAssignment_0() { return cMGAssignment_0; }
		
		//BindingRequiered
		public RuleCall getMGBindingRequieredParserRuleCall_0_0() { return cMGBindingRequieredParserRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//mD=BindingProvided
		public Assignment getMDAssignment_2() { return cMDAssignment_2; }
		
		//BindingProvided
		public RuleCall getMDBindingProvidedParserRuleCall_2_0() { return cMDBindingProvidedParserRuleCall_2_0; }
	}
	public class BindingRequieredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.BindingRequiered");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameComponentAttributeCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameComponentAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cNameComponentAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeRequieredServiceCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeRequieredServiceQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeRequieredServiceCrossReference_2_0.eContents().get(1);
		
		//BindingRequiered:
		//	name=[ComponentAttribute] '.' type=[RequieredService|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[ComponentAttribute] '.' type=[RequieredService|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//name=[ComponentAttribute]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[ComponentAttribute]
		public CrossReference getNameComponentAttributeCrossReference_0_0() { return cNameComponentAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getNameComponentAttributeIDTerminalRuleCall_0_0_1() { return cNameComponentAttributeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//type=[RequieredService|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[RequieredService|QualifiedName]
		public CrossReference getTypeRequieredServiceCrossReference_2_0() { return cTypeRequieredServiceCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeRequieredServiceQualifiedNameParserRuleCall_2_0_1() { return cTypeRequieredServiceQualifiedNameParserRuleCall_2_0_1; }
	}
	public class BindingProvidedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.BindingProvided");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameComponentAttributeCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameComponentAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cNameComponentAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeProvidedServiceCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeProvidedServiceQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeProvidedServiceCrossReference_2_0.eContents().get(1);
		
		//BindingProvided:
		//	name=[ComponentAttribute] '.' type=[ProvidedService|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[ComponentAttribute] '.' type=[ProvidedService|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//name=[ComponentAttribute]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[ComponentAttribute]
		public CrossReference getNameComponentAttributeCrossReference_0_0() { return cNameComponentAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getNameComponentAttributeIDTerminalRuleCall_0_0_1() { return cNameComponentAttributeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//type=[ProvidedService|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[ProvidedService|QualifiedName]
		public CrossReference getTypeProvidedServiceCrossReference_2_0() { return cTypeProvidedServiceCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeProvidedServiceQualifiedNameParserRuleCall_2_0_1() { return cTypeProvidedServiceQualifiedNameParserRuleCall_2_0_1; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProvidedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProvidedProvidedParserRuleCall_3_0 = (RuleCall)cProvidedAssignment_3.eContents().get(0);
		private final Assignment cRequieredAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequieredRequieredParserRuleCall_4_0 = (RuleCall)cRequieredAssignment_4.eContents().get(0);
		private final Assignment cMProvServicesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMProvServicesMProvidedServiceParserRuleCall_5_0 = (RuleCall)cMProvServicesAssignment_5.eContents().get(0);
		private final Assignment cMReqServicesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMReqServicesMRequieredServiceParserRuleCall_6_0 = (RuleCall)cMReqServicesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////Concerne les composants
		//Component:
		//	'Component' name=ID '{'
		//	provided=Provided
		//	requiered=Requiered
		//	mProvServices+=MProvidedService+
		//	mReqServices+=MRequieredService*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Component' name=ID '{' provided=Provided requiered=Requiered mProvServices+=MProvidedService+
		//mReqServices+=MRequieredService* '}'
		public Group getGroup() { return cGroup; }
		
		//'Component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//provided=Provided
		public Assignment getProvidedAssignment_3() { return cProvidedAssignment_3; }
		
		//Provided
		public RuleCall getProvidedProvidedParserRuleCall_3_0() { return cProvidedProvidedParserRuleCall_3_0; }
		
		//requiered=Requiered
		public Assignment getRequieredAssignment_4() { return cRequieredAssignment_4; }
		
		//Requiered
		public RuleCall getRequieredRequieredParserRuleCall_4_0() { return cRequieredRequieredParserRuleCall_4_0; }
		
		//mProvServices+=MProvidedService+
		public Assignment getMProvServicesAssignment_5() { return cMProvServicesAssignment_5; }
		
		//MProvidedService
		public RuleCall getMProvServicesMProvidedServiceParserRuleCall_5_0() { return cMProvServicesMProvidedServiceParserRuleCall_5_0; }
		
		//mReqServices+=MRequieredService*
		public Assignment getMReqServicesAssignment_6() { return cMReqServicesAssignment_6; }
		
		//MRequieredService
		public RuleCall getMReqServicesMRequieredServiceParserRuleCall_6_0() { return cMReqServicesMRequieredServiceParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ProvidedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Provided");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cProvidedServicesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cProvidedServicesProvidedServiceParserRuleCall_3_0_0 = (RuleCall)cProvidedServicesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cProvidedServicesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cProvidedServicesProvidedServiceParserRuleCall_3_1_1_0 = (RuleCall)cProvidedServicesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Liste des services pourvus par un composant X
		//Provided:
		//	'provided' '=' '{' (providedServices+=ProvidedService (',' providedServices+=ProvidedService)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'provided' '=' '{' (providedServices+=ProvidedService (',' providedServices+=ProvidedService)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'provided'
		public Keyword getProvidedKeyword_0() { return cProvidedKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//providedServices+=ProvidedService (',' providedServices+=ProvidedService)*
		public Group getGroup_3() { return cGroup_3; }
		
		//providedServices+=ProvidedService
		public Assignment getProvidedServicesAssignment_3_0() { return cProvidedServicesAssignment_3_0; }
		
		//ProvidedService
		public RuleCall getProvidedServicesProvidedServiceParserRuleCall_3_0_0() { return cProvidedServicesProvidedServiceParserRuleCall_3_0_0; }
		
		//(',' providedServices+=ProvidedService)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//providedServices+=ProvidedService
		public Assignment getProvidedServicesAssignment_3_1_1() { return cProvidedServicesAssignment_3_1_1; }
		
		//ProvidedService
		public RuleCall getProvidedServicesProvidedServiceParserRuleCall_3_1_1_0() { return cProvidedServicesProvidedServiceParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProvidedServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.ProvidedService");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ProvidedService:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class RequieredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Requiered");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRequieredAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequieredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRequieredServicesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRequieredServicesRequieredServiceParserRuleCall_4_0_0 = (RuleCall)cRequieredServicesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRequieredServicesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cRequieredServicesRequieredServiceParserRuleCall_4_1_1_0 = (RuleCall)cRequieredServicesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Liste des services requis par un composant X
		//Requiered:
		//	{Requiered} 'requiered' '=' '{' (requieredServices+=RequieredService? (',' requieredServices+=RequieredService)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Requiered} 'requiered' '=' '{' (requieredServices+=RequieredService? (',' requieredServices+=RequieredService)*) '}'
		public Group getGroup() { return cGroup; }
		
		//{Requiered}
		public Action getRequieredAction_0() { return cRequieredAction_0; }
		
		//'requiered'
		public Keyword getRequieredKeyword_1() { return cRequieredKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//requieredServices+=RequieredService? (',' requieredServices+=RequieredService)*
		public Group getGroup_4() { return cGroup_4; }
		
		//requieredServices+=RequieredService?
		public Assignment getRequieredServicesAssignment_4_0() { return cRequieredServicesAssignment_4_0; }
		
		//RequieredService
		public RuleCall getRequieredServicesRequieredServiceParserRuleCall_4_0_0() { return cRequieredServicesRequieredServiceParserRuleCall_4_0_0; }
		
		//(',' requieredServices+=RequieredService)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//requieredServices+=RequieredService
		public Assignment getRequieredServicesAssignment_4_1_1() { return cRequieredServicesAssignment_4_1_1; }
		
		//RequieredService
		public RuleCall getRequieredServicesRequieredServiceParserRuleCall_4_1_1_0() { return cRequieredServicesRequieredServiceParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RequieredServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.RequieredService");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//RequieredService:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class MProvidedServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.MProvidedService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProvidedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignaturePSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MProvidedService:
		//	'service' 'provided' signature=PSignature '{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' 'provided' signature=PSignature '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//'provided'
		public Keyword getProvidedKeyword_1() { return cProvidedKeyword_1; }
		
		//signature=PSignature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//PSignature
		public RuleCall getSignaturePSignatureParserRuleCall_2_0() { return cSignaturePSignatureParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.PSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameProvidedServiceCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameProvidedServiceIDTerminalRuleCall_1_0_1 = (RuleCall)cNameProvidedServiceCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_4_1_0 = (RuleCall)cAttributesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PSignature:
		//	type=ID name=[ProvidedService] '(' attributes+=Attribute? (',' attributes+=Attribute)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ID name=[ProvidedService] '(' attributes+=Attribute? (',' attributes+=Attribute)* ')'
		public Group getGroup() { return cGroup; }
		
		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }
		
		//name=[ProvidedService]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[ProvidedService]
		public CrossReference getNameProvidedServiceCrossReference_1_0() { return cNameProvidedServiceCrossReference_1_0; }
		
		//ID
		public RuleCall getNameProvidedServiceIDTerminalRuleCall_1_0_1() { return cNameProvidedServiceIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//attributes+=Attribute?
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_4_1() { return cAttributesAssignment_4_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_1_0() { return cAttributesAttributeParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MRequieredServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.MRequieredService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRequieredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureRSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MRequieredService:
		//	'service' 'requiered' signature=RSignature ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' 'requiered' signature=RSignature ';'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//'requiered'
		public Keyword getRequieredKeyword_1() { return cRequieredKeyword_1; }
		
		//signature=RSignature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//RSignature
		public RuleCall getSignatureRSignatureParserRuleCall_2_0() { return cSignatureRSignatureParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.RSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameRequieredServiceCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameRequieredServiceIDTerminalRuleCall_1_0_1 = (RuleCall)cNameRequieredServiceCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttributesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_4_1_0 = (RuleCall)cAttributesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RSignature:
		//	type=ID name=[RequieredService] '(' attributes+=Attribute? (',' attributes+=Attribute)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ID name=[RequieredService] '(' attributes+=Attribute? (',' attributes+=Attribute)* ')'
		public Group getGroup() { return cGroup; }
		
		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }
		
		//name=[RequieredService]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[RequieredService]
		public CrossReference getNameRequieredServiceCrossReference_1_0() { return cNameRequieredServiceCrossReference_1_0; }
		
		//ID
		public RuleCall getNameRequieredServiceIDTerminalRuleCall_1_0_1() { return cNameRequieredServiceIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//attributes+=Attribute?
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_4_1() { return cAttributesAssignment_4_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_1_0() { return cAttributesAttributeParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//	name=ID ':' type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=ID
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
	}
	
	
	private final DomainModelElements pDomainModel;
	private final ModelElements pModel;
	private final QualifiedNameElements pQualifiedName;
	private final ImportElements pImport;
	private final FqnWithWildCardElements pFqnWithWildCard;
	private final AssemblyElements pAssembly;
	private final ComponentAttributeElements pComponentAttribute;
	private final BindingElements pBinding;
	private final BindingRequieredElements pBindingRequiered;
	private final BindingProvidedElements pBindingProvided;
	private final ComponentElements pComponent;
	private final ProvidedElements pProvided;
	private final ProvidedServiceElements pProvidedService;
	private final RequieredElements pRequiered;
	private final RequieredServiceElements pRequieredService;
	private final MProvidedServiceElements pMProvidedService;
	private final PSignatureElements pPSignature;
	private final MRequieredServiceElements pMRequieredService;
	private final RSignatureElements pRSignature;
	private final AttributeElements pAttribute;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FooGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pModel = new ModelElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImport = new ImportElements();
		this.pFqnWithWildCard = new FqnWithWildCardElements();
		this.pAssembly = new AssemblyElements();
		this.pComponentAttribute = new ComponentAttributeElements();
		this.pBinding = new BindingElements();
		this.pBindingRequiered = new BindingRequieredElements();
		this.pBindingProvided = new BindingProvidedElements();
		this.pComponent = new ComponentElements();
		this.pProvided = new ProvidedElements();
		this.pProvidedService = new ProvidedServiceElements();
		this.pRequiered = new RequieredElements();
		this.pRequieredService = new RequieredServiceElements();
		this.pMProvidedService = new MProvidedServiceElements();
		this.pPSignature = new PSignatureElements();
		this.pMRequieredService = new MRequieredServiceElements();
		this.pRSignature = new RSignatureElements();
		this.pAttribute = new AttributeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.project.foo.Foo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Concerne les modeles
	//DomainModel:
	//	models+=Model*;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	//Model:
	//	'package' name=QualifiedName '{'
	//	imports+=Import*
	//	component+=Component*
	//	assembly+=Assembly*
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Import:
	//	'import' 'static' 'extension' importedNamespace=FqnWithWildCard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//FqnWithWildCard:
	//	QualifiedName '.*'?;
	public FqnWithWildCardElements getFqnWithWildCardAccess() {
		return pFqnWithWildCard;
	}
	
	public ParserRule getFqnWithWildCardRule() {
		return getFqnWithWildCardAccess().getRule();
	}
	
	////Concernce les assemblages
	//Assembly:
	//	{Assembly} 'Assembly' name=ID '{'
	//	'components'
	//	attributes+=ComponentAttribute
	//	attributes+=ComponentAttribute+
	//	'bindings'
	//	bindings+=Binding*
	//	'}';
	public AssemblyElements getAssemblyAccess() {
		return pAssembly;
	}
	
	public ParserRule getAssemblyRule() {
		return getAssemblyAccess().getRule();
	}
	
	////Les composants constituant un assemblage
	//ComponentAttribute:
	//	name=ID ':' type=[Component|QualifiedName];
	public ComponentAttributeElements getComponentAttributeAccess() {
		return pComponentAttribute;
	}
	
	public ParserRule getComponentAttributeRule() {
		return getComponentAttributeAccess().getRule();
	}
	
	//Binding:
	//	mG=BindingRequiered '-' mD=BindingProvided;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//BindingRequiered:
	//	name=[ComponentAttribute] '.' type=[RequieredService|QualifiedName];
	public BindingRequieredElements getBindingRequieredAccess() {
		return pBindingRequiered;
	}
	
	public ParserRule getBindingRequieredRule() {
		return getBindingRequieredAccess().getRule();
	}
	
	//BindingProvided:
	//	name=[ComponentAttribute] '.' type=[ProvidedService|QualifiedName];
	public BindingProvidedElements getBindingProvidedAccess() {
		return pBindingProvided;
	}
	
	public ParserRule getBindingProvidedRule() {
		return getBindingProvidedAccess().getRule();
	}
	
	////Concerne les composants
	//Component:
	//	'Component' name=ID '{'
	//	provided=Provided
	//	requiered=Requiered
	//	mProvServices+=MProvidedService+
	//	mReqServices+=MRequieredService*
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	////Liste des services pourvus par un composant X
	//Provided:
	//	'provided' '=' '{' (providedServices+=ProvidedService (',' providedServices+=ProvidedService)*)
	//	'}';
	public ProvidedElements getProvidedAccess() {
		return pProvided;
	}
	
	public ParserRule getProvidedRule() {
		return getProvidedAccess().getRule();
	}
	
	//ProvidedService:
	//	name=ID;
	public ProvidedServiceElements getProvidedServiceAccess() {
		return pProvidedService;
	}
	
	public ParserRule getProvidedServiceRule() {
		return getProvidedServiceAccess().getRule();
	}
	
	////Liste des services requis par un composant X
	//Requiered:
	//	{Requiered} 'requiered' '=' '{' (requieredServices+=RequieredService? (',' requieredServices+=RequieredService)*)
	//	'}';
	public RequieredElements getRequieredAccess() {
		return pRequiered;
	}
	
	public ParserRule getRequieredRule() {
		return getRequieredAccess().getRule();
	}
	
	//RequieredService:
	//	name=ID;
	public RequieredServiceElements getRequieredServiceAccess() {
		return pRequieredService;
	}
	
	public ParserRule getRequieredServiceRule() {
		return getRequieredServiceAccess().getRule();
	}
	
	//MProvidedService:
	//	'service' 'provided' signature=PSignature '{'
	//	'}';
	public MProvidedServiceElements getMProvidedServiceAccess() {
		return pMProvidedService;
	}
	
	public ParserRule getMProvidedServiceRule() {
		return getMProvidedServiceAccess().getRule();
	}
	
	//PSignature:
	//	type=ID name=[ProvidedService] '(' attributes+=Attribute? (',' attributes+=Attribute)* ')';
	public PSignatureElements getPSignatureAccess() {
		return pPSignature;
	}
	
	public ParserRule getPSignatureRule() {
		return getPSignatureAccess().getRule();
	}
	
	//MRequieredService:
	//	'service' 'requiered' signature=RSignature ';';
	public MRequieredServiceElements getMRequieredServiceAccess() {
		return pMRequieredService;
	}
	
	public ParserRule getMRequieredServiceRule() {
		return getMRequieredServiceAccess().getRule();
	}
	
	//RSignature:
	//	type=ID name=[RequieredService] '(' attributes+=Attribute? (',' attributes+=Attribute)* ')';
	public RSignatureElements getRSignatureAccess() {
		return pRSignature;
	}
	
	public ParserRule getRSignatureRule() {
		return getRSignatureAccess().getRule();
	}
	
	//Attribute:
	//	name=ID ':' type=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
