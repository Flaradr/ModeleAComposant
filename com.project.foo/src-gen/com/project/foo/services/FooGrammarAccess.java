/*
 * generated by Xtext 2.13.0
 */
package com.project.foo.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FooGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.DomainModel");
		private final Assignment cModelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModelModelParserRuleCall_0 = (RuleCall)cModelAssignment.eContents().get(0);
		
		////Concerne les modeles
		//DomainModel:
		//	model=Model;
		@Override public ParserRule getRule() { return rule; }
		
		//model=Model
		public Assignment getModelAssignment() { return cModelAssignment; }
		
		//Model
		public RuleCall getModelModelParserRuleCall_0() { return cModelModelParserRuleCall_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cComponentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsComponentParserRuleCall_4_0 = (RuleCall)cComponentsAssignment_4.eContents().get(0);
		private final Assignment cAssemblyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAssemblyAssemblyParserRuleCall_5_0 = (RuleCall)cAssemblyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*
		// * Structure d'un modele, correspond
		// * à un paquet pouvant contenir plusieurs
		// * composants et assemblages
		// */ Model:
		//	'package' name=QualifiedName '{'
		//	imports+=Import*
		//	components+=Component*
		//	assembly+=Assembly*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'package' name=QualifiedName '{' imports+=Import* components+=Component* assembly+=Assembly* '}'
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//components+=Component*
		public Assignment getComponentsAssignment_4() { return cComponentsAssignment_4; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_4_0() { return cComponentsComponentParserRuleCall_4_0; }
		
		//assembly+=Assembly*
		public Assignment getAssemblyAssignment_5() { return cAssemblyAssignment_5; }
		
		//Assembly
		public RuleCall getAssemblyAssemblyParserRuleCall_5_0() { return cAssemblyAssemblyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class AssemblyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Assembly");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssemblyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssemblyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cComponentsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesComponentInstanceParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Assignment cAttributesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributesComponentInstanceParserRuleCall_6_0 = (RuleCall)cAttributesAssignment_6.eContents().get(0);
		private final Keyword cBindingsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBindingsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBindingsBindingParserRuleCall_8_0 = (RuleCall)cBindingsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Structure d'un assemblage
		//Assembly:
		//	{Assembly} 'Assembly' name=ID '{'
		//	'components'
		//	attributes+=ComponentInstance
		//	attributes+=ComponentInstance+
		//	'bindings'
		//	bindings+=Binding*
		//	//	(bindingsrequired += Bindingrequired '-' bindingsProvided += BindingProvided)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Assembly} 'Assembly' name=ID '{' 'components' attributes+=ComponentInstance attributes+=ComponentInstance+ 'bindings'
		//bindings+=Binding* //	(bindingsrequired += Bindingrequired '-' bindingsProvided += BindingProvided)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Assembly}
		public Action getAssemblyAction_0() { return cAssemblyAction_0; }
		
		//'Assembly'
		public Keyword getAssemblyKeyword_1() { return cAssemblyKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'components'
		public Keyword getComponentsKeyword_4() { return cComponentsKeyword_4; }
		
		//attributes+=ComponentInstance
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }
		
		//ComponentInstance
		public RuleCall getAttributesComponentInstanceParserRuleCall_5_0() { return cAttributesComponentInstanceParserRuleCall_5_0; }
		
		//attributes+=ComponentInstance+
		public Assignment getAttributesAssignment_6() { return cAttributesAssignment_6; }
		
		//ComponentInstance
		public RuleCall getAttributesComponentInstanceParserRuleCall_6_0() { return cAttributesComponentInstanceParserRuleCall_6_0; }
		
		//'bindings'
		public Keyword getBindingsKeyword_7() { return cBindingsKeyword_7; }
		
		//bindings+=Binding*
		public Assignment getBindingsAssignment_8() { return cBindingsAssignment_8; }
		
		//Binding
		public RuleCall getBindingsBindingParserRuleCall_8_0() { return cBindingsBindingParserRuleCall_8_0; }
		
		////	(bindingsrequired += Bindingrequired '-' bindingsProvided += BindingProvided)*
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ComponentInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.ComponentInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cComponentComponentCrossReference_2_0 = (CrossReference)cComponentAssignment_2.eContents().get(0);
		private final RuleCall cComponentComponentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cComponentComponentCrossReference_2_0.eContents().get(1);
		
		////Structure d'un composant
		//ComponentInstance:
		//	name=ID ':' component=[Component|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' component=[Component|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//component=[Component|QualifiedName]
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }
		
		//[Component|QualifiedName]
		public CrossReference getComponentComponentCrossReference_2_0() { return cComponentComponentCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getComponentComponentQualifiedNameParserRuleCall_2_0_1() { return cComponentComponentQualifiedNameParserRuleCall_2_0_1; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBindingRequiredBindingRequiredParserRuleCall_0_0 = (RuleCall)cBindingRequiredAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBindingProvidedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBindingProvidedBindingProvidedParserRuleCall_2_0 = (RuleCall)cBindingProvidedAssignment_2.eContents().get(0);
		
		////Lien entre d'un service requis d'un composant X et d'un
		////service fourni d'un composant Y
		//Binding:
		//	bindingRequired=BindingRequired '-' bindingProvided=BindingProvided;
		@Override public ParserRule getRule() { return rule; }
		
		//bindingRequired=BindingRequired '-' bindingProvided=BindingProvided
		public Group getGroup() { return cGroup; }
		
		//bindingRequired=BindingRequired
		public Assignment getBindingRequiredAssignment_0() { return cBindingRequiredAssignment_0; }
		
		//BindingRequired
		public RuleCall getBindingRequiredBindingRequiredParserRuleCall_0_0() { return cBindingRequiredBindingRequiredParserRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//bindingProvided=BindingProvided
		public Assignment getBindingProvidedAssignment_2() { return cBindingProvidedAssignment_2; }
		
		//BindingProvided
		public RuleCall getBindingProvidedBindingProvidedParserRuleCall_2_0() { return cBindingProvidedBindingProvidedParserRuleCall_2_0; }
	}
	public class BindingRequiredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.BindingRequired");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameComponentInstanceCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameComponentInstanceIDTerminalRuleCall_0_0_1 = (RuleCall)cNameComponentInstanceCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cServiceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cServiceRSignatureCrossReference_2_0 = (CrossReference)cServiceAssignment_2.eContents().get(0);
		private final RuleCall cServiceRSignatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cServiceRSignatureCrossReference_2_0.eContents().get(1);
		
		////Instance du composant ayant besoin d'un service
		//BindingRequired:
		//	name=[ComponentInstance] "." service=[RSignature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[ComponentInstance] "." service=[RSignature|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//name=[ComponentInstance]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[ComponentInstance]
		public CrossReference getNameComponentInstanceCrossReference_0_0() { return cNameComponentInstanceCrossReference_0_0; }
		
		//ID
		public RuleCall getNameComponentInstanceIDTerminalRuleCall_0_0_1() { return cNameComponentInstanceIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//service=[RSignature|QualifiedName]
		public Assignment getServiceAssignment_2() { return cServiceAssignment_2; }
		
		//[RSignature|QualifiedName]
		public CrossReference getServiceRSignatureCrossReference_2_0() { return cServiceRSignatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getServiceRSignatureQualifiedNameParserRuleCall_2_0_1() { return cServiceRSignatureQualifiedNameParserRuleCall_2_0_1; }
	}
	public class BindingProvidedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.BindingProvided");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameComponentInstanceCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameComponentInstanceIDTerminalRuleCall_0_0_1 = (RuleCall)cNameComponentInstanceCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cServiceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cServicePSignatureCrossReference_2_0 = (CrossReference)cServiceAssignment_2.eContents().get(0);
		private final RuleCall cServicePSignatureQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cServicePSignatureCrossReference_2_0.eContents().get(1);
		
		////Instance du composant fournissant un service
		//BindingProvided:
		//	name=[ComponentInstance] "." service=[PSignature|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[ComponentInstance] "." service=[PSignature|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//name=[ComponentInstance]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[ComponentInstance]
		public CrossReference getNameComponentInstanceCrossReference_0_0() { return cNameComponentInstanceCrossReference_0_0; }
		
		//ID
		public RuleCall getNameComponentInstanceIDTerminalRuleCall_0_0_1() { return cNameComponentInstanceIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//service=[PSignature|QualifiedName]
		public Assignment getServiceAssignment_2() { return cServiceAssignment_2; }
		
		//[PSignature|QualifiedName]
		public CrossReference getServicePSignatureCrossReference_2_0() { return cServicePSignatureCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getServicePSignatureQualifiedNameParserRuleCall_2_0_1() { return cServicePSignatureQualifiedNameParserRuleCall_2_0_1; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRefinesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefinedComponentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefinedComponentComponentCrossReference_2_1_0 = (CrossReference)cRefinedComponentAssignment_2_1.eContents().get(0);
		private final RuleCall cRefinedComponentComponentQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cRefinedComponentComponentCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cListOfPServicesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cListOfPServicesListOfProvidedServicesParserRuleCall_4_0 = (RuleCall)cListOfPServicesAssignment_4.eContents().get(0);
		private final Assignment cListOfRServicesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cListOfRServicesListOfrequiredServicesParserRuleCall_5_0 = (RuleCall)cListOfRServicesAssignment_5.eContents().get(0);
		private final Assignment cMProvServicesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMProvServicesMProvidedServiceParserRuleCall_6_0 = (RuleCall)cMProvServicesAssignment_6.eContents().get(0);
		private final Assignment cMReqServicesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMReqServicesMRequiredServiceParserRuleCall_7_0 = (RuleCall)cMReqServicesAssignment_7.eContents().get(0);
		private final Assignment cAssemblyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAssemblyAssemblyParserRuleCall_8_0 = (RuleCall)cAssemblyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Structure d'un composant
		//Component:
		//	'Component' name=ID ('refines' refinedComponent=[Component|QualifiedName])? '{'
		//	listOfPServices=ListOfProvidedServices
		//	listOfRServices=ListOfrequiredServices
		//	mProvServices+=MProvidedService+
		//	mReqServices+=MRequiredService*
		//	assembly+=Assembly*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Component' name=ID ('refines' refinedComponent=[Component|QualifiedName])? '{' listOfPServices=ListOfProvidedServices
		//listOfRServices=ListOfrequiredServices mProvServices+=MProvidedService+ mReqServices+=MRequiredService*
		//assembly+=Assembly* '}'
		public Group getGroup() { return cGroup; }
		
		//'Component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('refines' refinedComponent=[Component|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'refines'
		public Keyword getRefinesKeyword_2_0() { return cRefinesKeyword_2_0; }
		
		//refinedComponent=[Component|QualifiedName]
		public Assignment getRefinedComponentAssignment_2_1() { return cRefinedComponentAssignment_2_1; }
		
		//[Component|QualifiedName]
		public CrossReference getRefinedComponentComponentCrossReference_2_1_0() { return cRefinedComponentComponentCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getRefinedComponentComponentQualifiedNameParserRuleCall_2_1_0_1() { return cRefinedComponentComponentQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//listOfPServices=ListOfProvidedServices
		public Assignment getListOfPServicesAssignment_4() { return cListOfPServicesAssignment_4; }
		
		//ListOfProvidedServices
		public RuleCall getListOfPServicesListOfProvidedServicesParserRuleCall_4_0() { return cListOfPServicesListOfProvidedServicesParserRuleCall_4_0; }
		
		//listOfRServices=ListOfrequiredServices
		public Assignment getListOfRServicesAssignment_5() { return cListOfRServicesAssignment_5; }
		
		//ListOfrequiredServices
		public RuleCall getListOfRServicesListOfrequiredServicesParserRuleCall_5_0() { return cListOfRServicesListOfrequiredServicesParserRuleCall_5_0; }
		
		//mProvServices+=MProvidedService+
		public Assignment getMProvServicesAssignment_6() { return cMProvServicesAssignment_6; }
		
		//MProvidedService
		public RuleCall getMProvServicesMProvidedServiceParserRuleCall_6_0() { return cMProvServicesMProvidedServiceParserRuleCall_6_0; }
		
		//mReqServices+=MRequiredService*
		public Assignment getMReqServicesAssignment_7() { return cMReqServicesAssignment_7; }
		
		//MRequiredService
		public RuleCall getMReqServicesMRequiredServiceParserRuleCall_7_0() { return cMReqServicesMRequiredServiceParserRuleCall_7_0; }
		
		//assembly+=Assembly*
		public Assignment getAssemblyAssignment_8() { return cAssemblyAssignment_8; }
		
		//Assembly
		public RuleCall getAssemblyAssemblyParserRuleCall_8_0() { return cAssemblyAssemblyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ListOfProvidedServicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.ListOfProvidedServices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cProvidedServicesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cProvidedServicesProvidedServiceParserRuleCall_3_0_0 = (RuleCall)cProvidedServicesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cProvidedServicesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cProvidedServicesProvidedServiceParserRuleCall_3_1_1_0 = (RuleCall)cProvidedServicesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Liste des services fourni par un composant X
		//ListOfProvidedServices:
		//	'provided' '=' '{' (providedServices+=ProvidedService (',' providedServices+=ProvidedService)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'provided' '=' '{' (providedServices+=ProvidedService (',' providedServices+=ProvidedService)*) '}'
		public Group getGroup() { return cGroup; }
		
		//'provided'
		public Keyword getProvidedKeyword_0() { return cProvidedKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//providedServices+=ProvidedService (',' providedServices+=ProvidedService)*
		public Group getGroup_3() { return cGroup_3; }
		
		//providedServices+=ProvidedService
		public Assignment getProvidedServicesAssignment_3_0() { return cProvidedServicesAssignment_3_0; }
		
		//ProvidedService
		public RuleCall getProvidedServicesProvidedServiceParserRuleCall_3_0_0() { return cProvidedServicesProvidedServiceParserRuleCall_3_0_0; }
		
		//(',' providedServices+=ProvidedService)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//providedServices+=ProvidedService
		public Assignment getProvidedServicesAssignment_3_1_1() { return cProvidedServicesAssignment_3_1_1; }
		
		//ProvidedService
		public RuleCall getProvidedServicesProvidedServiceParserRuleCall_3_1_1_0() { return cProvidedServicesProvidedServiceParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProvidedServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.ProvidedService");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNamePSignatureCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNamePSignatureIDTerminalRuleCall_0_1 = (RuleCall)cNamePSignatureCrossReference_0.eContents().get(1);
		
		//ProvidedService:
		//	name=[PSignature];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[PSignature]
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//[PSignature]
		public CrossReference getNamePSignatureCrossReference_0() { return cNamePSignatureCrossReference_0; }
		
		//ID
		public RuleCall getNamePSignatureIDTerminalRuleCall_0_1() { return cNamePSignatureIDTerminalRuleCall_0_1; }
	}
	public class ListOfrequiredServicesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.ListOfrequiredServices");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListOfrequiredServicesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRequiredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRequiredServicesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRequiredServicesRequiredServiceParserRuleCall_4_0_0 = (RuleCall)cRequiredServicesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cRequiredServicesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cRequiredServicesRequiredServiceParserRuleCall_4_1_1_0 = (RuleCall)cRequiredServicesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Liste des services requis par un composant X
		//ListOfrequiredServices:
		//	{ListOfrequiredServices} 'required' '=' '{' (requiredServices+=RequiredService? (','
		//	requiredServices+=RequiredService)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListOfrequiredServices} 'required' '=' '{' (requiredServices+=RequiredService? (','
		//requiredServices+=RequiredService)*) '}'
		public Group getGroup() { return cGroup; }
		
		//{ListOfrequiredServices}
		public Action getListOfrequiredServicesAction_0() { return cListOfrequiredServicesAction_0; }
		
		//'required'
		public Keyword getRequiredKeyword_1() { return cRequiredKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//requiredServices+=RequiredService? (',' requiredServices+=RequiredService)*
		public Group getGroup_4() { return cGroup_4; }
		
		//requiredServices+=RequiredService?
		public Assignment getRequiredServicesAssignment_4_0() { return cRequiredServicesAssignment_4_0; }
		
		//RequiredService
		public RuleCall getRequiredServicesRequiredServiceParserRuleCall_4_0_0() { return cRequiredServicesRequiredServiceParserRuleCall_4_0_0; }
		
		//(',' requiredServices+=RequiredService)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//requiredServices+=RequiredService
		public Assignment getRequiredServicesAssignment_4_1_1() { return cRequiredServicesAssignment_4_1_1; }
		
		//RequiredService
		public RuleCall getRequiredServicesRequiredServiceParserRuleCall_4_1_1_0() { return cRequiredServicesRequiredServiceParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RequiredServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.RequiredService");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameRSignatureCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameRSignatureIDTerminalRuleCall_0_1 = (RuleCall)cNameRSignatureCrossReference_0.eContents().get(1);
		
		//RequiredService:
		//	name=[RSignature];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[RSignature]
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//[RSignature]
		public CrossReference getNameRSignatureCrossReference_0() { return cNameRSignatureCrossReference_0; }
		
		//ID
		public RuleCall getNameRSignatureIDTerminalRuleCall_0_1() { return cNameRSignatureIDTerminalRuleCall_0_1; }
	}
	public class MProvidedServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.MProvidedService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProvidedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignaturePSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Signature d'un service fourni
		//MProvidedService:
		//	'service' 'provided' signature=PSignature '{' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' 'provided' signature=PSignature '{' '}'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//'provided'
		public Keyword getProvidedKeyword_1() { return cProvidedKeyword_1; }
		
		//signature=PSignature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//PSignature
		public RuleCall getSignaturePSignatureParserRuleCall_2_0() { return cSignaturePSignatureParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.PSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Signature d'un service fourni
		//PSignature:
		//	type=ID name=ID '(' parameters+=Parameter? (',' parameters+=Parameter)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ID name=ID '(' parameters+=Parameter? (',' parameters+=Parameter)* ')'
		public Group getGroup() { return cGroup; }
		
		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameters+=Parameter?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0() { return cParametersParameterParserRuleCall_3_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_0() { return cParametersParameterParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MRequiredServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.MRequiredService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRequiredKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureRSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MRequiredService:
		//	'service' 'required' signature=RSignature ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'service' 'required' signature=RSignature ';'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//'required'
		public Keyword getRequiredKeyword_1() { return cRequiredKeyword_1; }
		
		//signature=RSignature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//RSignature
		public RuleCall getSignatureRSignatureParserRuleCall_2_0() { return cSignatureRSignatureParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class RSignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.RSignature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Signature d'un service requis
		//RSignature:
		//	type=ID name=ID '(' parameters+=Parameter? (',' parameters+=Parameter)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=ID name=ID '(' parameters+=Parameter? (',' parameters+=Parameter)* ')'
		public Group getGroup() { return cGroup; }
		
		//type=ID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0() { return cTypeIDTerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameters+=Parameter?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0() { return cParametersParameterParserRuleCall_3_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_0() { return cParametersParameterParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.project.foo.Foo.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		////Parametre dans une signature 
		//Parameter:
		//	name=ID ':' type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=ID
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
	}
	
	
	private final DomainModelElements pDomainModel;
	private final ModelElements pModel;
	private final QualifiedNameElements pQualifiedName;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final AssemblyElements pAssembly;
	private final ComponentInstanceElements pComponentInstance;
	private final BindingElements pBinding;
	private final BindingRequiredElements pBindingRequired;
	private final BindingProvidedElements pBindingProvided;
	private final ComponentElements pComponent;
	private final ListOfProvidedServicesElements pListOfProvidedServices;
	private final ProvidedServiceElements pProvidedService;
	private final ListOfrequiredServicesElements pListOfrequiredServices;
	private final RequiredServiceElements pRequiredService;
	private final MProvidedServiceElements pMProvidedService;
	private final PSignatureElements pPSignature;
	private final MRequiredServiceElements pMRequiredService;
	private final RSignatureElements pRSignature;
	private final ParameterElements pParameter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FooGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainModel = new DomainModelElements();
		this.pModel = new ModelElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pAssembly = new AssemblyElements();
		this.pComponentInstance = new ComponentInstanceElements();
		this.pBinding = new BindingElements();
		this.pBindingRequired = new BindingRequiredElements();
		this.pBindingProvided = new BindingProvidedElements();
		this.pComponent = new ComponentElements();
		this.pListOfProvidedServices = new ListOfProvidedServicesElements();
		this.pProvidedService = new ProvidedServiceElements();
		this.pListOfrequiredServices = new ListOfrequiredServicesElements();
		this.pRequiredService = new RequiredServiceElements();
		this.pMProvidedService = new MProvidedServiceElements();
		this.pPSignature = new PSignatureElements();
		this.pMRequiredService = new MRequiredServiceElements();
		this.pRSignature = new RSignatureElements();
		this.pParameter = new ParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.project.foo.Foo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Concerne les modeles
	//DomainModel:
	//	model=Model;
	public DomainModelElements getDomainModelAccess() {
		return pDomainModel;
	}
	
	public ParserRule getDomainModelRule() {
		return getDomainModelAccess().getRule();
	}
	
	///*
	// * Structure d'un modele, correspond
	// * à un paquet pouvant contenir plusieurs
	// * composants et assemblages
	// */ Model:
	//	'package' name=QualifiedName '{'
	//	imports+=Import*
	//	components+=Component*
	//	assembly+=Assembly*
	//	'}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	////Structure d'un assemblage
	//Assembly:
	//	{Assembly} 'Assembly' name=ID '{'
	//	'components'
	//	attributes+=ComponentInstance
	//	attributes+=ComponentInstance+
	//	'bindings'
	//	bindings+=Binding*
	//	//	(bindingsrequired += Bindingrequired '-' bindingsProvided += BindingProvided)*
	//	'}';
	public AssemblyElements getAssemblyAccess() {
		return pAssembly;
	}
	
	public ParserRule getAssemblyRule() {
		return getAssemblyAccess().getRule();
	}
	
	////Structure d'un composant
	//ComponentInstance:
	//	name=ID ':' component=[Component|QualifiedName];
	public ComponentInstanceElements getComponentInstanceAccess() {
		return pComponentInstance;
	}
	
	public ParserRule getComponentInstanceRule() {
		return getComponentInstanceAccess().getRule();
	}
	
	////Lien entre d'un service requis d'un composant X et d'un
	////service fourni d'un composant Y
	//Binding:
	//	bindingRequired=BindingRequired '-' bindingProvided=BindingProvided;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	////Instance du composant ayant besoin d'un service
	//BindingRequired:
	//	name=[ComponentInstance] "." service=[RSignature|QualifiedName];
	public BindingRequiredElements getBindingRequiredAccess() {
		return pBindingRequired;
	}
	
	public ParserRule getBindingRequiredRule() {
		return getBindingRequiredAccess().getRule();
	}
	
	////Instance du composant fournissant un service
	//BindingProvided:
	//	name=[ComponentInstance] "." service=[PSignature|QualifiedName];
	public BindingProvidedElements getBindingProvidedAccess() {
		return pBindingProvided;
	}
	
	public ParserRule getBindingProvidedRule() {
		return getBindingProvidedAccess().getRule();
	}
	
	////Structure d'un composant
	//Component:
	//	'Component' name=ID ('refines' refinedComponent=[Component|QualifiedName])? '{'
	//	listOfPServices=ListOfProvidedServices
	//	listOfRServices=ListOfrequiredServices
	//	mProvServices+=MProvidedService+
	//	mReqServices+=MRequiredService*
	//	assembly+=Assembly*
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	////Liste des services fourni par un composant X
	//ListOfProvidedServices:
	//	'provided' '=' '{' (providedServices+=ProvidedService (',' providedServices+=ProvidedService)*)
	//	'}';
	public ListOfProvidedServicesElements getListOfProvidedServicesAccess() {
		return pListOfProvidedServices;
	}
	
	public ParserRule getListOfProvidedServicesRule() {
		return getListOfProvidedServicesAccess().getRule();
	}
	
	//ProvidedService:
	//	name=[PSignature];
	public ProvidedServiceElements getProvidedServiceAccess() {
		return pProvidedService;
	}
	
	public ParserRule getProvidedServiceRule() {
		return getProvidedServiceAccess().getRule();
	}
	
	////Liste des services requis par un composant X
	//ListOfrequiredServices:
	//	{ListOfrequiredServices} 'required' '=' '{' (requiredServices+=RequiredService? (','
	//	requiredServices+=RequiredService)*)
	//	'}';
	public ListOfrequiredServicesElements getListOfrequiredServicesAccess() {
		return pListOfrequiredServices;
	}
	
	public ParserRule getListOfrequiredServicesRule() {
		return getListOfrequiredServicesAccess().getRule();
	}
	
	//RequiredService:
	//	name=[RSignature];
	public RequiredServiceElements getRequiredServiceAccess() {
		return pRequiredService;
	}
	
	public ParserRule getRequiredServiceRule() {
		return getRequiredServiceAccess().getRule();
	}
	
	////Signature d'un service fourni
	//MProvidedService:
	//	'service' 'provided' signature=PSignature '{' '}';
	public MProvidedServiceElements getMProvidedServiceAccess() {
		return pMProvidedService;
	}
	
	public ParserRule getMProvidedServiceRule() {
		return getMProvidedServiceAccess().getRule();
	}
	
	////Signature d'un service fourni
	//PSignature:
	//	type=ID name=ID '(' parameters+=Parameter? (',' parameters+=Parameter)* ')';
	public PSignatureElements getPSignatureAccess() {
		return pPSignature;
	}
	
	public ParserRule getPSignatureRule() {
		return getPSignatureAccess().getRule();
	}
	
	//MRequiredService:
	//	'service' 'required' signature=RSignature ';';
	public MRequiredServiceElements getMRequiredServiceAccess() {
		return pMRequiredService;
	}
	
	public ParserRule getMRequiredServiceRule() {
		return getMRequiredServiceAccess().getRule();
	}
	
	////Signature d'un service requis
	//RSignature:
	//	type=ID name=ID '(' parameters+=Parameter? (',' parameters+=Parameter)* ')';
	public RSignatureElements getRSignatureAccess() {
		return pRSignature;
	}
	
	public ParserRule getRSignatureRule() {
		return getRSignatureAccess().getRule();
	}
	
	////Parametre dans une signature 
	//Parameter:
	//	name=ID ':' type=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
