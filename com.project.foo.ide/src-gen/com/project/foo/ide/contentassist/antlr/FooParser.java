/*
 * generated by Xtext 2.13.0
 */
package com.project.foo.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.project.foo.ide.contentassist.antlr.internal.InternalFooParser;
import com.project.foo.services.FooGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FooParser extends AbstractContentAssistParser {

	@Inject
	private FooGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalFooParser createParser() {
		InternalFooParser result = new InternalFooParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getFqnWithWildCardAccess().getGroup(), "rule__FqnWithWildCard__Group__0");
					put(grammarAccess.getAssemblyAccess().getGroup(), "rule__Assembly__Group__0");
					put(grammarAccess.getComponentAttributeAccess().getGroup(), "rule__ComponentAttribute__Group__0");
					put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
					put(grammarAccess.getBindingRequieredAccess().getGroup(), "rule__BindingRequiered__Group__0");
					put(grammarAccess.getBindingProvidedAccess().getGroup(), "rule__BindingProvided__Group__0");
					put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
					put(grammarAccess.getProvidedAccess().getGroup(), "rule__Provided__Group__0");
					put(grammarAccess.getProvidedAccess().getGroup_3(), "rule__Provided__Group_3__0");
					put(grammarAccess.getProvidedAccess().getGroup_3_1(), "rule__Provided__Group_3_1__0");
					put(grammarAccess.getRequieredAccess().getGroup(), "rule__Requiered__Group__0");
					put(grammarAccess.getRequieredAccess().getGroup_4(), "rule__Requiered__Group_4__0");
					put(grammarAccess.getRequieredAccess().getGroup_4_1(), "rule__Requiered__Group_4_1__0");
					put(grammarAccess.getMProvidedServiceAccess().getGroup(), "rule__MProvidedService__Group__0");
					put(grammarAccess.getPSignatureAccess().getGroup(), "rule__PSignature__Group__0");
					put(grammarAccess.getPSignatureAccess().getGroup_4(), "rule__PSignature__Group_4__0");
					put(grammarAccess.getMRequieredServiceAccess().getGroup(), "rule__MRequieredService__Group__0");
					put(grammarAccess.getRSignatureAccess().getGroup(), "rule__RSignature__Group__0");
					put(grammarAccess.getRSignatureAccess().getGroup_4(), "rule__RSignature__Group_4__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getDomainModelAccess().getModelsAssignment(), "rule__DomainModel__ModelsAssignment");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_3(), "rule__Model__ImportsAssignment_3");
					put(grammarAccess.getModelAccess().getComponentAssignment_4(), "rule__Model__ComponentAssignment_4");
					put(grammarAccess.getModelAccess().getAssemblyAssignment_5(), "rule__Model__AssemblyAssignment_5");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_3(), "rule__Import__ImportedNamespaceAssignment_3");
					put(grammarAccess.getAssemblyAccess().getNameAssignment_2(), "rule__Assembly__NameAssignment_2");
					put(grammarAccess.getAssemblyAccess().getAttributesAssignment_5(), "rule__Assembly__AttributesAssignment_5");
					put(grammarAccess.getAssemblyAccess().getAttributesAssignment_6(), "rule__Assembly__AttributesAssignment_6");
					put(grammarAccess.getAssemblyAccess().getBindingsAssignment_8(), "rule__Assembly__BindingsAssignment_8");
					put(grammarAccess.getComponentAttributeAccess().getNameAssignment_0(), "rule__ComponentAttribute__NameAssignment_0");
					put(grammarAccess.getComponentAttributeAccess().getComposantAssignment_2(), "rule__ComponentAttribute__ComposantAssignment_2");
					put(grammarAccess.getBindingAccess().getMGAssignment_0(), "rule__Binding__MGAssignment_0");
					put(grammarAccess.getBindingAccess().getMDAssignment_2(), "rule__Binding__MDAssignment_2");
					put(grammarAccess.getBindingRequieredAccess().getIdAssignment_0(), "rule__BindingRequiered__IdAssignment_0");
					put(grammarAccess.getBindingRequieredAccess().getServiceAssignment_2(), "rule__BindingRequiered__ServiceAssignment_2");
					put(grammarAccess.getBindingProvidedAccess().getIdAssignment_0(), "rule__BindingProvided__IdAssignment_0");
					put(grammarAccess.getBindingProvidedAccess().getServiceAssignment_2(), "rule__BindingProvided__ServiceAssignment_2");
					put(grammarAccess.getComponentAccess().getNameAssignment_1(), "rule__Component__NameAssignment_1");
					put(grammarAccess.getComponentAccess().getProvidedAssignment_3(), "rule__Component__ProvidedAssignment_3");
					put(grammarAccess.getComponentAccess().getRequieredAssignment_4(), "rule__Component__RequieredAssignment_4");
					put(grammarAccess.getComponentAccess().getMProvServicesAssignment_5(), "rule__Component__MProvServicesAssignment_5");
					put(grammarAccess.getComponentAccess().getMReqServicesAssignment_6(), "rule__Component__MReqServicesAssignment_6");
					put(grammarAccess.getProvidedAccess().getProvidedServicesAssignment_3_0(), "rule__Provided__ProvidedServicesAssignment_3_0");
					put(grammarAccess.getProvidedAccess().getProvidedServicesAssignment_3_1_1(), "rule__Provided__ProvidedServicesAssignment_3_1_1");
					put(grammarAccess.getProvidedServiceAccess().getNameAssignment(), "rule__ProvidedService__NameAssignment");
					put(grammarAccess.getRequieredAccess().getRequieredServicesAssignment_4_0(), "rule__Requiered__RequieredServicesAssignment_4_0");
					put(grammarAccess.getRequieredAccess().getRequieredServicesAssignment_4_1_1(), "rule__Requiered__RequieredServicesAssignment_4_1_1");
					put(grammarAccess.getRequieredServiceAccess().getNameAssignment(), "rule__RequieredService__NameAssignment");
					put(grammarAccess.getMProvidedServiceAccess().getSignatureAssignment_2(), "rule__MProvidedService__SignatureAssignment_2");
					put(grammarAccess.getPSignatureAccess().getTypeAssignment_0(), "rule__PSignature__TypeAssignment_0");
					put(grammarAccess.getPSignatureAccess().getNameAssignment_1(), "rule__PSignature__NameAssignment_1");
					put(grammarAccess.getPSignatureAccess().getAttributesAssignment_3(), "rule__PSignature__AttributesAssignment_3");
					put(grammarAccess.getPSignatureAccess().getAttributesAssignment_4_1(), "rule__PSignature__AttributesAssignment_4_1");
					put(grammarAccess.getMRequieredServiceAccess().getSignatureAssignment_2(), "rule__MRequieredService__SignatureAssignment_2");
					put(grammarAccess.getRSignatureAccess().getTypeAssignment_0(), "rule__RSignature__TypeAssignment_0");
					put(grammarAccess.getRSignatureAccess().getNameAssignment_1(), "rule__RSignature__NameAssignment_1");
					put(grammarAccess.getRSignatureAccess().getAttributesAssignment_3(), "rule__RSignature__AttributesAssignment_3");
					put(grammarAccess.getRSignatureAccess().getAttributesAssignment_4_1(), "rule__RSignature__AttributesAssignment_4_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FooGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FooGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
